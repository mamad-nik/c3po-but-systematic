
%%
"class"   { printf("class\n"); }
"if"	  { printf("keyword\n"); }
"else"	  { printf("keyword\n"); }
"while"   { printf("keyword\n"); }
"public"  { printf("protect\n"); }
"private" { printf("protect\n"); }
"void"    { printf("prim\n"); }
"int"     { printf("prim\n"); }
"boolean" { printf("prim\n"); }
"static"  { printf("static\n"); }
"this"    { printf("ref\n"); }
"="       { printf("assign\n"); }
">"       { printf("relop\n"); }
"<"       { printf("relop\n"); }
"=="      { printf("equal\n"); }
"<="      { printf("relop\n"); }
">="      { printf("relop\n"); }
"!="      { printf("relop\n"); }
"&&"      { printf("logop\n"); }
"||"      { printf("logop\n"); }
"!"       { printf("logop\n"); }
"+"       { printf("ariop\n"); }
"-"       { printf("ariop\n"); }
"*"       { printf("ariop\n"); }
"/"       { printf("ariop\n"); }
"\."	  { printf("dot\n"); }
"return"  { printf("returnstmt\n"); }
";"       { printf("EOL\n"); }
"("       { printf("openpar\n"); }
")"       { printf("closepar\n"); }
"{"       { printf("opcurbr\n"); }
"}"       { printf("clcurbr\n"); }
"["       { printf("opbr\n"); }
"]"       { printf("clbr\n"); }
"\""      { printf("qouma\n"); }
[a-zA-Z]([a-zA-Z0-9_])* { printf("ID\n"); }
("+"|"-")?[0-9]+	  { printf("NUM\n"); }	
%%
